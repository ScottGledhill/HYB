def config = {
	localProperties {
		property 'recaptcha.publickey', ''
		property 'recaptcha.privatekey', ''
		property 'googleApiKey', ''
		property 'csrf.allowed.url.patterns', '/[^/]+(/[^?]*)+(sop/response)$,/[^/]+(/[^?]*)+(merchant_callback)$,/[^/]+(/[^?]*)+(hop/response)$,/[^/]+(/[^?]*)+(language)$,/[^/]+(/[^?]*)+(currency)$,/(events)$'
		property 'log4j.logger.de.hybris.eventtracking.publisher', 'DEBUG'

		property 'piwik.tracker.url', ''
		property 'piwik.tracker.https.url', ''
		property 'eventtrackingwsaddon.events_endpoint.enabled','true'
		property 'yprofileeventtrackingws.events_endpoint.enabled','true'
		property 'spring.profiles.active', 'eventtrackingpublisher_develop'
	}

	extensions {
	    extName 'mcc'
	    extName 'commercesearchbackoffice'
	    extName 'commerceservicesbackoffice'
	    extName 'solrfacetsearchbackoffice'
	    extName 'solrserver'

	    extName 'yacceleratorcockpits'
	    extName 'yacceleratorinitialdata'
	    extName 'yacceleratorfulfilmentprocess'
	    extName 'yacceleratorstorefront'
	    extName 'ycommercewebservices'
	    extName 'ycommercewebservicestest'

	    extName 'electronicsstore'
	    extName 'apparelstore'

	    extName 'captchaaddon'
	    extName 'liveeditaddon'
	    extName 'acceleratorwebservicesaddon'
	    extName 'commerceorgsamplesaddon'
	    extName 'orderselfserviceaddon'

	    extName 'rulebuilderbackoffice'
	    extName 'couponbackoffice'
	    extName 'droolsruleengineservices'
	    extName 'couponfacades'
	    extName 'promotionenginesamplesaddon'

	    extName 'assistedservicestorefront'
	    extName 'assistedservicecustomerinterestsaddon'
	    
	    extName 'customerticketingaddon'
	    extName 'customersupportbackoffice'
	    extName 'eventtrackingwsaddon'
	    extName 'hybrisanalyticsaddon'
	    extName 'yprofileeventtrackingws'
	    extName 'yprofileeventadapter'
	    extName 'yprofileprocessadapter'
	    extName 'privacyoverlayeraddon'
	    extName 'yaasconfigurationbackoffice'

	    extName 'textfieldconfiguratortemplatebackoffice'
	    extName 'textfieldconfiguratortemplateaddon'

	    extName 'cmswebservices'
	    extName 'smarteditwebservices'
	    extName 'cmssmarteditwebservices'
	    extName 'permissionswebservices'
	    extName 'smarteditaddon'
	    extName 'cmssmartedit'

	    extName 'consignmenttrackingaddon'
	    extName 'consignmenttrackingmockaddon'
	    extName 'consignmenttrackingbackoffice'

	    extName 'notificationaddon'
	    extName 'customerinterestsaddon'
	    extName 'stocknotificationaddon'

	    extName 'previewpersonalizationweb'
	    extName 'personalizationcmsweb'
	    extName 'personalizationsmartedit'
	    extName 'personalizationsampledataaddon'
	    extName 'personalizationyprofile'
	    extName 'personalizationpromotions'
	    extName 'personalizationpromotionsweb'
	    extName 'personalizationservicesbackoffice'
	    extName 'personalizationpromotionsbackoffice'
	    extName 'personalizationcmsbackoffice'
	
	    extName 'assistedserviceatddtests'
	    extName 'promotionengineatddtests'
	    extName 'commercesearchatddtests'
	    extName 'textfieldconfiguratortemplateatddtests'
	}
}

task setup << {
	apply plugin: 'installer-platform-plugin'
	apply plugin: 'installer-addon-plugin'
	def pl = platform(config)
	pl.setup()

	pl.project.addons {
		names "captchaaddon,liveeditaddon,commerceorgsamplesaddon,promotionenginesamplesaddon,hybrisanalyticsaddon,eventtrackingwsaddon,assistedservicestorefront,assistedservicecustomerinterestsaddon,customerticketingaddon,privacyoverlayeraddon,textfieldconfiguratortemplateaddon,smarteditaddon,consignmenttrackingaddon,consignmenttrackingmockaddon,notificationaddon,customerinterestsaddon,stocknotificationaddon,orderselfserviceaddon"
		template "yacceleratorstorefront"
		storeFronts "yacceleratorstorefront"
		platform pl
	}

	pl.project.addons {
		names "acceleratorwebservicesaddon"
		template "ycommercewebservices"
		storeFronts "ycommercewebservices"
		platform pl
	}
}

task initialize << {
	apply plugin: 'installer-platform-plugin'
	def pl = platform(config)
	pl.build()
	pl.initialize()
}


task start << {
	apply plugin: 'installer-platform-plugin'
	def pl = platform(config)
	pl.start()
}
