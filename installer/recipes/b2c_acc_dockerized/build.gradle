apply plugin: 'installer-platform-plugin'
apply plugin: 'installer-platform-containerization-plugin'
apply plugin: 'installer-addon-plugin'

def pl = platform {
    localProperties {
        property 'persistence.legacy.mode', 'false'
        property 'googleApiKey', ''
        property 'solr.config.apparel-deSolrServerConfig.urls', getSolrModeUrls()
        property 'solr.config.apparel-ukSolrServerConfig.urls', getSolrModeUrls()
        property 'solr.config.electronicsSolrServerConfig.urls', getSolrModeUrls()
        property 'solr.config.Local Standalone.urls', getSolrModeUrls()
        property 'solr.config.apparel-deSolrServerConfig.mode', getSolrModeConfig()
        property 'solr.config.apparel-ukSolrServerConfig.mode', getSolrModeConfig()
        property 'solr.config.electronicsSolrServerConfig.mode', getSolrModeConfig()
        property 'solr.server.mode', getSolrModeConfig()
        property 'solrserver.instances.default.autostart', 'false'
        property 'installed.tenants', ''
    }
    
    extensions {
			extName 'mcc'
			extName 'commercesearchbackoffice'
			extName 'commerceservicesbackoffice'
			extName 'solrfacetsearchbackoffice'
			extName 'solrserver'
			extName 'yacceleratorcockpits'
			extName 'yacceleratorinitialdata'
			extName 'yacceleratorfulfilmentprocess'
			extName 'yacceleratorstorefront'
			extName 'ycommercewebservices'
			extName 'ycommercewebservicestest'

			extName 'electronicsstore'
			extName 'apparelstore'

			extName 'liveeditaddon'
			extName 'acceleratorwebservicesaddon'
			extName 'orderselfserviceaddon'

			extName 'customersupportbackoffice'
			extName 'customerticketingaddon'
			extName 'commerceorgsamplesaddon'

			extName 'rulebuilderbackoffice'
			extName 'couponbackoffice'
			extName 'droolsruleengineservices'
			extName 'couponfacades'
			extName 'promotionenginesamplesaddon'

			extName 'cmswebservices'
			extName 'smarteditwebservices'
			extName 'cmssmarteditwebservices'
			extName 'permissionswebservices'
			extName 'smarteditaddon'
			extName 'cmssmartedit'

			extName 'previewpersonalizationweb'
			extName 'personalizationcmsweb'
			extName 'personalizationsmartedit'
			extName 'personalizationsampledataaddon'
			extName 'personalizationyprofile'

			extName 'textfieldconfiguratortemplatebackoffice'
			extName 'textfieldconfiguratortemplateaddon'
			extName 'assistedservicestorefront'
		}

    dbSetup {
        dbType 'hsqldb'
        dbUrl 'jdbc:hsqldb:hsql://hsql:9090/hybris;hsqldb.tx=MVCC'
        dbUser 'hybris'
        dbPassword 'hybris'
    }

    clusterSettings {
        enableAutodiscovery()
        udpMulticast()
    }
}

def dpl = deployment('b2caccDeployment') {

    loadBalancer("${project.projectDir}/resources/apachelb")

    zookeeper("${project.projectDir}/resources/zookeeper/")
    
    hsqlImage('hsql') {
        properties {
            property 'port', '9090'
        }
    }
    
    solrImage('solr') {        
        properties {
            property 'port', '8983'
        }
    }

    platformImage('platform') {
        basedOn pl

        aspect('hac') {
            enabledWebApps 'hac', 'mediaweb'            
        }

        aspect('backgroundProcessing')

        adminAspect()
        
        aspect('accstorefront') {
            enabledWebApps 'yacceleratorstorefront', 'mediaweb'
            disableBackgroundProcessing()
        }
        
        aspect('backoffice') {
            enabledWebApps 'backoffice', 'hac', 'mediaweb'
            disableBackgroundProcessing()
        }        
    }
    
}

def String getSolrModeUrls() {
     if(project.hasProperty('solrMode')){
        solrMode == "cloud" ? "zookeeper1:2181,zookeeper2:2181,zookeeper3:2181" : "http://solr:8983/solr"
      } else {
        "http://solr:8983/solr"
      }
}

def String getSolrModeConfig() {
    if(project.hasProperty('solrMode')){
        solrMode == "cloud" ? "cloud" : "standalone"
    } else {
        "standalone"
    }
}

task setup << {
    pl.setup()
    pl.project.addons {
				names "liveeditaddon,commerceorgsamplesaddon,promotionenginesamplesaddon,smarteditaddon,textfieldconfiguratortemplateaddon,assistedservicestorefront,customerticketingaddon,orderselfserviceaddon"
				template "yacceleratorstorefront"
				storeFronts "yacceleratorstorefront"
				platform pl
		}

		pl.project.addons {
				names "acceleratorwebservicesaddon"
				template "ycommercewebservices"
				storeFronts "ycommercewebservices"
				platform pl
		}
}

task build(dependsOn: setup) << {
    pl.build()
}

task createImagesStructure(dependsOn: build) << {
    dpl.createImagesStructure()
    dpl.writeDockerBuildScript()
}


